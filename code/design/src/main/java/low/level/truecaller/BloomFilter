What is BloomFilter ?

They are memory optimized data structures.
https://www.geeksforgeeks.org/bloom-filters-introduction-and-python-implementation/

Suppose you are creating an account a website, you want to enter a cool username, you entered it and go message, "Username is already taken".
You added your birth date along username, still no luck.
Now you have added your university roll number also, still got "Username is already taken".
It's frustatng, isn't it ?
But have you ever thought how quick the website checks availability of username by searching millions of username registered with it.
There are many ways to do ths job - 
-- Linear Search. bad idea.
-- Binary Search. 
Store all usernames alphabetically and compare entered username with middle one in list, if it matches, then username is taken otherwise figure out,
whether entered username will come before or after missle one and if it will come after, neglect all the usernames before middle name(inclusive).
Now search after middle one and repeat this process until you got a match or search end with no match.
This technique is better and promising but still it requires multiple steps.

Bloom Filter is a data structure that can do this job.
Based on Hashing.
A hash function takes input and output a  unique identifier of fixed length which is used for identification of input.

A Bloom filter is a space-efficient probabilistic data structure that is used to test whether an element is a member of a set.
For example, checking availability of username is set membership problem, where the set is the list of all registered username.
The price we pay for efiiciency is that it is probabilistic in nature that means, there might be some False positive results.
False positive means, it might tell that given username is already taken but actually it's not.

Intresting Properties of Bloom Filters
- Unlike a standard hash table, a Bloom Filter of a fixed size can represent a set with an arbitrary large number of elements.
- Adding an element never fails. However, the false positive rate increases steadily as elements are added until all bits in the filter are set to 1, at which point all queries yield a positive result.
- Bloom filters never generate false negative result, i.e., telling you that a username doesn't exist when it already exists.
- Deleting elements from filter is not possible because, if we delete a single element by clearing bits at indices generated by k hash functions, it might cause deletion of few other elements.

to be continued...